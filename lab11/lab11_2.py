#!/usr/bin/env python3
# -*-codding:utf-8 -*-


# Це просте завдання приклад того як генератори використовуються для генерації елементів нескінченої послідовності.
# Завдання реалізувати свій генератор випадкових чисел.
# - вибирається початкове значення X, що містить 6 цифр, можливо з нулями, що передують. Це так званий seed.
# - генероване число містить 6 знаків, можливо з нулями попереду;
# - поточне значення X розділяється на дві частини по три цифри які міняються місцями для отримання значення Y (тобто,
# якщо X = 654321, то Y = 321654);
# - перемножаються X та Y, отримується 12-знакове число (можливо з передуючими нулями), наприклад 654321 * 321654 =
# = 210464966934
# - вирізаються рівно з середини 6 цифр з цього довгого числа, це і є згенерований випадковий результат (для нашого
# прикладу = 464966), який віддає генератор (повертати слід int в діапазоні від 0 до 999999, не відображати передуючі
# нулі, які використовуються тільки при "обчисленнях"), він же використовується як початкове значення для обчислення
# наступного.
# Звичайно, це завдання слід реалізувати з використанням функцій-генераторів

# Test-case: seed = 654321

# 654321, 464966, 372900, 748718, 139565, 873624, 904049, 115661,  465222, 495612, 559871, 960608, 971847, 98072, 70795,
#  286980


def get_random(seed: str) -> int:
    """ Create generator of number, separated multiple number on part..."""

    if len(seed) < 6:
        seed = '0' * (6 - len(seed)) + seed
    elif len(seed) > 6:
        raise ValueError('Not supported seed')
    else:
        pass

    while True:
        seed = str(seed)
        raw_number = list(str(int(seed[3:] + seed[0:3]) * int(seed)))
        while len(raw_number) > 7:
            raw_number.pop(0)
            raw_number.pop(-1)
        if len(raw_number) > 6:
            del raw_number[-1]
        seed = int(''.join(raw_number))
        yield seed


a = get_random(input("Input seed: "))
print(a.__next__())
print(a.__next__())
print(a.__next__())
